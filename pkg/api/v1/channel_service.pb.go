// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        (unknown)
// source: channel_service.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// protoc -I=./proto/v1 --go_out=plugins=grpc:./pkg/api/v1 ./proto/v1/channel_service.proto
type UserChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	URL     string `protobuf:"bytes,2,opt,name=URL,json=uRL,proto3" json:"URL,omitempty"`
	Key     string `protobuf:"bytes,3,opt,name=Key,json=key,proto3" json:"Key,omitempty"`
	Enabled bool   `protobuf:"varint,4,opt,name=Enabled,json=enabled,proto3" json:"Enabled,omitempty"`
	UserID  int64  `protobuf:"varint,5,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
	ID      int64  `protobuf:"varint,6,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
}

func (x *UserChannel) Reset() {
	*x = UserChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChannel) ProtoMessage() {}

func (x *UserChannel) ProtoReflect() protoreflect.Message {
	mi := &file_channel_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChannel.ProtoReflect.Descriptor instead.
func (*UserChannel) Descriptor() ([]byte, []int) {
	return file_channel_service_proto_rawDescGZIP(), []int{0}
}

func (x *UserChannel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserChannel) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *UserChannel) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UserChannel) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *UserChannel) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserChannel) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_channel_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_channel_service_proto_rawDescGZIP(), []int{1}
}

func (x *User) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type GetUserChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamKey string `protobuf:"bytes,2,opt,name=StreamKey,json=streamKey,proto3" json:"StreamKey,omitempty"`
}

func (x *GetUserChannelRequest) Reset() {
	*x = GetUserChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserChannelRequest) ProtoMessage() {}

func (x *GetUserChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_channel_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserChannelRequest.ProtoReflect.Descriptor instead.
func (*GetUserChannelRequest) Descriptor() ([]byte, []int) {
	return file_channel_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetUserChannelRequest) GetStreamKey() string {
	if x != nil {
		return x.StreamKey
	}
	return ""
}

type GetUserChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     *User          `protobuf:"bytes,1,opt,name=User,json=user,proto3" json:"User,omitempty"`
	StreamID int64          `protobuf:"varint,2,opt,name=StreamID,json=streamID,proto3" json:"StreamID,omitempty"`
	Channels []*UserChannel `protobuf:"bytes,3,rep,name=Channels,json=channels,proto3" json:"Channels,omitempty"`
}

func (x *GetUserChannelResponse) Reset() {
	*x = GetUserChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserChannelResponse) ProtoMessage() {}

func (x *GetUserChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_channel_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserChannelResponse.ProtoReflect.Descriptor instead.
func (*GetUserChannelResponse) Descriptor() ([]byte, []int) {
	return file_channel_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserChannelResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GetUserChannelResponse) GetStreamID() int64 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *GetUserChannelResponse) GetChannels() []*UserChannel {
	if x != nil {
		return x.Channels
	}
	return nil
}

var File_channel_service_proto protoreflect.FileDescriptor

var file_channel_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x22, 0x87, 0x01, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x52,
	0x4c, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x44, 0x22, 0x16, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x44, 0x22, 0x35, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4b, 0x65, 0x79, 0x22, 0x7f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x32, 0x52, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x6e, 0x67, 0x61, 0x6e, 0x61, 0x74,
	0x68, 0x73, 0x2f, 0x67, 0x6f, 0x2d, 0x72, 0x74, 0x6d, 0x70, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_channel_service_proto_rawDescOnce sync.Once
	file_channel_service_proto_rawDescData = file_channel_service_proto_rawDesc
)

func file_channel_service_proto_rawDescGZIP() []byte {
	file_channel_service_proto_rawDescOnce.Do(func() {
		file_channel_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_channel_service_proto_rawDescData)
	})
	return file_channel_service_proto_rawDescData
}

var file_channel_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_channel_service_proto_goTypes = []interface{}{
	(*UserChannel)(nil),            // 0: v1.UserChannel
	(*User)(nil),                   // 1: v1.User
	(*GetUserChannelRequest)(nil),  // 2: v1.GetUserChannelRequest
	(*GetUserChannelResponse)(nil), // 3: v1.GetUserChannelResponse
}
var file_channel_service_proto_depIdxs = []int32{
	1, // 0: v1.GetUserChannelResponse.User:type_name -> v1.User
	0, // 1: v1.GetUserChannelResponse.Channels:type_name -> v1.UserChannel
	2, // 2: v1.UserChannelService.Get:input_type -> v1.GetUserChannelRequest
	3, // 3: v1.UserChannelService.Get:output_type -> v1.GetUserChannelResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_channel_service_proto_init() }
func file_channel_service_proto_init() {
	if File_channel_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_channel_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_channel_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_channel_service_proto_goTypes,
		DependencyIndexes: file_channel_service_proto_depIdxs,
		MessageInfos:      file_channel_service_proto_msgTypes,
	}.Build()
	File_channel_service_proto = out.File
	file_channel_service_proto_rawDesc = nil
	file_channel_service_proto_goTypes = nil
	file_channel_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserChannelServiceClient is the client API for UserChannelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserChannelServiceClient interface {
	Get(ctx context.Context, in *GetUserChannelRequest, opts ...grpc.CallOption) (*GetUserChannelResponse, error)
}

type userChannelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserChannelServiceClient(cc grpc.ClientConnInterface) UserChannelServiceClient {
	return &userChannelServiceClient{cc}
}

func (c *userChannelServiceClient) Get(ctx context.Context, in *GetUserChannelRequest, opts ...grpc.CallOption) (*GetUserChannelResponse, error) {
	out := new(GetUserChannelResponse)
	err := c.cc.Invoke(ctx, "/v1.UserChannelService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserChannelServiceServer is the server API for UserChannelService service.
type UserChannelServiceServer interface {
	Get(context.Context, *GetUserChannelRequest) (*GetUserChannelResponse, error)
}

// UnimplementedUserChannelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserChannelServiceServer struct {
}

func (*UnimplementedUserChannelServiceServer) Get(context.Context, *GetUserChannelRequest) (*GetUserChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterUserChannelServiceServer(s *grpc.Server, srv UserChannelServiceServer) {
	s.RegisterService(&_UserChannelService_serviceDesc, srv)
}

func _UserChannelService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserChannelServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserChannelService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserChannelServiceServer).Get(ctx, req.(*GetUserChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserChannelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.UserChannelService",
	HandlerType: (*UserChannelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _UserChannelService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channel_service.proto",
}
